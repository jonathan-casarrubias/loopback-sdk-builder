/* tslint:disable */
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/startWith';
import 'rxjs/add/operator/switchMap';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/toArray';
import { Observable } from 'rxjs/Observable';
import { of } from 'rxjs/observable/of';
import { concat } from 'rxjs/observable/concat';
import { Injectable, Inject } from '@angular/core';
import { Effect, Actions } from '@ngrx/effects';

import { LoopbackAction } from '../models/BaseModels';
import { BaseLoopbackEffects } from './base';

import { <%- modelName %>ActionTypes, <%- modelName %>Actions } from '../actions/<%- modelName %>';
import { LoopbackErrorActions } from '../actions/error';
import { <%- modelName %>Api } from '../services/index';

@Injectable()
export class <%- modelName %>Effects extends BaseLoopbackEffects {
<% model.methods.forEach(function(action) {
 
  var methodName = action.name.split('.').join('$').replace('prototype$', '').replace(/::/g, '__');
  var httpVerb = action.getEndpoints ? action.getEndpoints()[0].verb : action.getHttpMethod();
  var fullPath = action.getEndpoints ? action.getEndpoints()[0].fullPath : action.getFullPath();

  // all of these methods are extended from base service
  if (methodName.match(/(^create$|^createMany$|^find$|^replaceOrCreate$|^replaceById$|^upsert$|^upsertWithWhere$|^exists$|^findOne$|^findById$|^deleteById$|^updateAttributes$|^patchOrCreate$|^patchAttributes$|^updateAll$|^count$|^createChangeStream$)/)) { return; }

  // Unsupported and out of scope methods
  if (methodName.match(/(^exists$|^__exists|^myRemote$|^stats$|^count$|^__count)/)) { return; }

  if (!model.sharedClass.ctor.settings.sdk.blacklist[methodName]) {

  // SET URL PARAMS
  var urlParams = action.accepts;
  // SET POST BODY
  var postData;
  if (httpVerb == 'POST' || httpVerb == 'PUT' || httpVerb == 'PATCH') {
    postData = action.accepts;
  }
  // SET ROUTE PARAMS
  var routeParams = action.accepts
-%>
  @Effect()
  protected <%- normalizeMethodName(methodName) %>: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.<%- upperCasedMethodName(methodName) %>)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.<%- normalizeMethodName(methodName) %>(<%- buildMethodParamsFromPayload(model, methodName, action.accepts) %>)
      <% if (methodName.match(/(^__delete)/)) { -%>
  .map((response) => new <%- modelName %>Actions.<%- normalizeMethodName(methodName) %>Success(action.payload, action.meta))
      <% } else if (methodName.match(/(^logout$)/)) { -%>
  .map((response) => new <%- modelName %>Actions.<%- normalizeMethodName(methodName) %>Success(action.meta))
      <% } else if (methodName.match(/(^login$)/)) { -%>
  .map((response) => new <%- modelName %>Actions.<%- normalizeMethodName(methodName) %>Success(response, action.meta))
      <% } else if (!action.returns || action.returns.length == 0) { -%>
  .map((response) => new <%- modelName %>Actions.<%- normalizeMethodName(methodName) %>Success(action.payload.id, action.payload.fk, action.meta))
      <% } else { -%>
  .map((response) => new <%- modelName %>Actions.<%- normalizeMethodName(methodName) %>Success(action.payload.id, response, action.meta))
      <% } -%>
  .catch((error) => concat(
          of(new <%- modelName %>Actions.<%- normalizeMethodName(methodName) %>Fail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );

<% } -%>
<% }); // model.methods.foreach -%>
  <% if (model.isUser) { -%>
  /**
   * @author João Ribeiro <@JonnyBGod> <github:JonnyBGod>
   * @description
   * <%- modelName %> specific actions
   */
  @Effect()
  protected signup: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.SIGNUP)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.create(action.payload)
        .map((response) => new <%- modelName %>Actions.signupSuccess(action.payload, response, action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.signupFail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );
    
  <% } -%>
  /**
   * @author João Ribeiro <@JonnyBGod> <github:JonnyBGod>
   * @description
   * Decorate base effects metadata
   */
  @Effect() protected create;
  @Effect() protected createMany;
  @Effect() protected findById;
  @Effect() protected find;
  @Effect() protected findOne;
  @Effect() protected updateAll;
  @Effect() protected deleteById;
  @Effect() protected updateAttributes;
  @Effect() protected upsert;
  @Effect() protected upsertWithWhere;
  @Effect() protected replaceOrCreate;
  @Effect() protected replaceById;
  @Effect() protected patchOrCreate;
  @Effect() protected patchAttributes;

  constructor(
    @Inject(Actions) public actions$: Actions,
    @Inject(<%- modelName %>Api) public <%- modelName.toLowerCase() %>: <%- modelName %>Api
  ) {
    super(actions$, <%- modelName.toLowerCase() %>, '<%- modelName %>', <%- modelName %>ActionTypes, <%- modelName %>Actions);
  }
}
