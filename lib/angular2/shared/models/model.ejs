/* tslint:disable */
<%- buildModelImports(model) %>
declare var Object: any;
export interface <%- modelName %>Interface {
<%- buildModelProperties(model, true) %>
}

export class <%- modelName %> implements <%- modelName %>Interface {
<%- buildModelProperties(model) %>
  constructor(instance?: <%- modelName %>Interface) {
    Object.assign(this, instance);
  }
  /**
   * The name of the model represented by this $resource,
   * i.e. `<%- modelName %>`.
   */
  public static getModelName() {
    return <%-: modelName | q %>;
  }
  public static getModelDefinition() {
    return {
      name: '<%- modelName %>',
      properties: [<% for ( var prop in model.properties ) { %>
        {
          name: '<%= prop %>',
          type: '<%= buildPropertyType( model.properties[prop].type ) %>'<% if ( model.properties[prop].hasOwnProperty( "default" ) ) { %>,
          default: <%- buildPropertyDefaultValue( model.properties[prop] ) %><% } %>
        },<% } %>
      ],
      relations: [<% for ( var rel in model.sharedClass.ctor.relations ) { %>
        {
          name: '<%= rel %>',
          type: '<%- buildRelationType( model, rel ) %>'
        },<% } %>
      ]
    }
  }
}
