/* tslint:disable */
<%- buildModelImports(model) %>
declare var Object: any;
export interface <%- modelName %>Interface {
<%- buildModelProperties(model, true) %>
}

export class <%- modelName %> implements <%- modelName %>Interface {
<%- buildModelProperties(model) %>
  constructor(data?: <%- modelName %>Interface) {
    Object.assign(this, data);
  }
  /**
   * The name of the model represented by this $resource,
   * i.e. `<%- modelName %>`.
   */
  public static getModelName() {
    return <%-: modelName | q %>;
  }
  /**
  * @method factory
  * @author Jonathan Casarrubias
  * @license MIT
  * This method creates an instance of <%- modelName %> for dynamic purposes.
  **/
  public static factory(data: <%- modelName %>Interface): <%- modelName %>{
    return new <%- modelName %>(data);
  }
  /**
  * @method getModelDefinition
  * @author Julien Ledun
  * @license MIT
  * This method returns an object that represents some of the model
  * definitions.
  **/
  public static getModelDefinition() {
    return {
      name: '<%- modelName %>',
      plural: '<%- plural %>',
      properties: {<% for ( var prop in model.properties ) { %>
        "<%= prop %>": {
          name: '<%= prop %>',
          type: '<%= buildPropertyType( model.properties[prop] ) %>'<% if ( model.properties[prop].hasOwnProperty( "default" ) ) { %>,
          default: <%- buildPropertyDefaultValue( model.properties[prop] ) %><% } %>
        },<% } %>
      },
      relations: {<% for ( var rel in model.sharedClass.ctor.relations ) { %>
        <%= rel %>: {
          name: '<%= rel %>',
          type: '<%- buildRelationType( model, rel ) %>',
          model: '<%- model.sharedClass.ctor.relations[rel].targetClass %>'
        },<% } %>
      }
    }
  }

  /**
  * @method emptyInstanceFactory
  * @author Michal Fraczkiewicz <bonaventoora@gmail.com>
  * @license MIT
  * This method returns an object instance with attributes initialised with default values
  * (to insert it into angular's FormBuilder for example).
  *
  * @example
  * // creates form group with fields from model definition
  * this.form = this._formBuilder.group(MeanModel.emptyInstanceFactory());
  **/
  public static emptyInstanceFactory() {
    let instance = {
    <% for (var prop in model.properties) { %>   <%- prop %>: <%- buildPropertyDefaultValue( model.properties[prop] ) %>,
    <% } %> };
    return <%- modelName %>.factory(instance);
  }
}
